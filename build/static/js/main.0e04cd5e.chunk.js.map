{"version":3,"sources":["assets/img/map.PNG","assets/img/nav.png","logo.svg","components/map.jsx","components/inputs.jsx","components/mapTool.jsx","components/mapContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","divStyle","width","height","position","top","Data","y","left","x","transform","rotation","React","useState","className","src","image","ismap","onClick","e","img","posX","nativeEvent","offsetX","posY","offsetY","onSubmit","navIcon","style","Rot","setRot","data","value","onChange","event","target","coordinates","setCoordinates","formState","dataFromParent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,uECA3CD,EAAOC,QAAU,IAA0B,kC,oLCa5B,WAACC,GAEZ,IAGMC,EAAW,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,WACVC,IAPFC,EAAKC,EAOI,GAAG,KACVC,KAPFF,EAAKG,EAOK,GAAG,KACXC,UAAW,UAAUJ,EAAKK,SAAS,QAXzB,EAacC,IAAMC,SAAS,IAb7B,6BAmBtB,OAEI,yBAAKC,UAAU,gBACP,yBAAKC,IAAKC,IAAOC,OAAK,EAACC,QACnB,SAAwBC,EAAGC,GACvB,IAAIC,EAAOF,EAAEG,YAAYC,QACrBC,EAAOL,EAAEG,YAAYG,QAMzB,OAJAnB,EAAKG,EAAIY,EACTf,EAAKC,EAAIiB,EACTxB,EAAM0B,SAAS,CAACL,EAAMG,IAEf,CAACf,EAAGY,EAAMd,EAAGiB,MAIpB,yBAAKT,IAAKY,IAASC,MAAO3B,MC5CnC,WAACD,GAAW,IAAD,EAEAa,mBAAS,IAFT,mBAEfgB,EAFe,KAEVC,EAFU,KAGtBxB,EAAKK,SAAWkB,EACD7B,EAAR+B,KAEP,OACI,yBAAKjB,UAAU,UACX,yBAAKc,MAAO,CAAC1B,MAAO,SAChB,wCACA,kCACA,2BAAO8B,MAAO1B,EAAKG,IACnB,kCACA,2BAAOuB,MAAO1B,EAAKC,IACnB,wCACA,mCACA,2BAAO0B,SAAU,SAAAC,GAAK,OAAIJ,EAAOI,EAAMC,OAAOH,aChB/C,aAAO,IAAD,EAEqBnB,mBAAS,CAAC,GAAG,KAFlC,mBAEVuB,EAFU,KAEGC,EAFH,KAQjB,OACI,yBAAKvB,UAAU,WACX,kBAAC,EAAD,CAAKY,SANb,SAAkBY,GACdD,EAAeC,MAMX,kBAAC,EAAD,CAAQC,eAAgBH,MCXrB,aACX,OACI,yBAAKtB,UAAU,cACX,kBAAC,EAAD,QCQG0B,MARf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QCEc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e04cd5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.ca6d8373.PNG\";","module.exports = __webpack_public_path__ + \"static/media/nav.b3375870.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport image from '../assets/img/map.PNG';\r\nimport navIcon from '../assets/img/nav.png';\r\nimport Data from '../assets/data/coordinates.json';\r\n\r\nlet Coordinates = {\r\n    x: 0,\r\n    y: 0,\r\n    rotation: 0\r\n}\r\n\r\n\r\n\r\nexport default (props) => {\r\n\r\n    const y = Data.y;\r\n    const x = Data.x;\r\n\r\n    const divStyle = {\r\n                width: \"30px\",\r\n                height: \"30px\",\r\n                position: \"absolute\",\r\n                top: y-15+\"px\",\r\n                left: x-15+\"px\",\r\n                transform: \"rotate(\"+Data.rotation+\"deg)\"\r\n    }\r\n    const [inputValue, setInputValue] = React.useState('');\r\n\r\n    function onChange() {\r\n        //setInputValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"MapContainer\">\r\n                <img src={image} ismap onClick={\r\n                    function getImageCoords(e, img) {\r\n                        var posX = e.nativeEvent.offsetX;\r\n                        var posY = e.nativeEvent.offsetY;\r\n                        //alert(\"x: \" + posX + \"\\ny: \" + posY);\r\n                        Data.x = posX;\r\n                        Data.y = posY;\r\n                        props.onSubmit([posX, posY]);\r\n                        //alert(\"x: \" + Data.x + \"\\ny: \" + Data.y);\r\n                        return {x: posX, y: posY};\r\n                    }\r\n\r\n                    //{(e) => console.log(e.clientY - e.target.offsetTop) + console.log(e.clientX - e.target.offsetLeft)}\r\n                }></img><img src={navIcon} style={divStyle}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport Map from './map.jsx';\r\nimport Data from '../assets/data/coordinates.json';\r\n\r\nexport default (props) => {\r\n\r\n    const [Rot, setRot] = useState('');\r\n    Data.rotation = Rot;\r\n    const {data} = props;\r\n\r\n    return (\r\n        <div className=\"inputs\">\r\n            <div style={{width: '100%'}}>\r\n                <h2>POSITION</h2>\r\n                <p>x: </p>\r\n                <input value={Data.x}></input>\r\n                <p>y: </p>\r\n                <input value={Data.y}></input>\r\n                <h2>ROTATION</h2>\r\n                <p>deg:</p>\r\n                <input onChange={event => setRot(event.target.value)}></input>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Map from './map.jsx';\r\nimport Inputs from './inputs.jsx';\r\n\r\nexport default () => {\r\n\r\n    const [coordinates, setCoordinates] = useState(['','']);\r\n\r\n    function onSubmit(formState) {\r\n        setCoordinates(formState);\r\n        //alert('Data: ' + formState);\r\n    }\r\n    return (\r\n        <div className=\"MapTool\">\r\n            <Map onSubmit={onSubmit}></Map>\r\n            <Inputs dataFromParent={coordinates}></Inputs>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport MapTool from './mapTool.jsx';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"MapSection\">\r\n            <MapTool>\r\n                \r\n            </MapTool>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport './assets/css/style.css';\nimport MapSection from './components/mapContainer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapSection></MapSection>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}